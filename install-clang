#! /usr/bin/env bash
#
# Parameters
# - ${release}              : common version to use
#   - ${version_llvm}       : specific version for llvm
#   - ${version_clang}      : specific version for clang
#   - ${version_libcxx}     : specific version for libcxx
#   - ${version_compilerrt} : specific version for compiler-rt
#   - ${version_libcxxabi}  : specific version for libcxxabi
#   - ${version_lldb}       : specific version for lldd
#   - ${version_lld}        : specific version for lld
#   - ${version_omp}        : specific version for OpenMP
#   - ${version_extra}      : specific version for clang-extra-tools
# - ${GCCHOME}              : path where GCC is installed, when dealing with a
# - perform_lldb_build      : If 1, attempt to build LLDB.
# - perform_lld_build       : If 1, attempt to build LLD.
# - perform_omp_build       : If 1, attempt to build OpenMP.
# - perform_extra_build     : If 1, attempt to build clang-extra tools.
# non-standard installation.
#
# TODO:
#    - Try adding lldb once again.

#### Options {{{1

OS=$(uname)
if [ "${OS}" == "Linux" ]; then
    triple=""
    soext="so"
    somask="so.%s"
    addl_ldflags=" -ldl"
    addl_cmake=""

elif [ "${OS}" == "FreeBSD" ]; then
    triple=""
    soext="so"
    somask="so.%s"
    addl_ldflags=""
    addl_cmake=""

elif [ "${OS}" == "Darwin" ]; then
    triple="-apple-"
    soext="dylib"
    somask="%d.dylib"
    addl_ldflags=""
    addl_cmake="-DCMAKE_OSX_ARCHITECTURES=x86_64;i386"

else
    echo "OS ${OS} not supported by this script."
    exit 1
fi

if [ -n "${CC}" ]; then
    cc=${CC}
elif which clang > /dev/null 2>&1; then
    cc=clang
elif which gcc > /dev/null 2>&1; then
    cc=gcc
else
    echo could not find clang or gcc in '${PATH}'
    exit 1
fi

if [ -n "${CXX}" ]; then
    cxx=${CXX}
elif which clang++ > /dev/null 2>&1; then
    cxx=clang++
elif which g++ > /dev/null 2>&1; then
    cxx=g++
else
    echo could not find clang++ or g++ in '${PATH}'
    exit 1
fi

use_master=0
perform_clone=1                               # If 0, skip the cloning (for testing only).
perform_stage1=1                              # If 0, skip the 1st bootstrap stage (for testing only).
perform_stage2=1                              # If 0, skip the 2nd stage compiling LLVM/clang against libc++ (for testing only).
perform_lldb_build=${perform_lldb_build:-0}   # If 1, attempt to build LLDB.
perform_lld_build=${perform_lld_build:-0}     # If 1, attempt to build LLD.
perform_omp_build=${perform_omp_build:-0}     # If 1, attempt to build OpenMP.
perform_extra_build=${perform_extra_build:-0} # If 1, attempt to build clang-extra tools.
perform_cleanup=0                             # If 1, delete all source and build directories.
assertions=off                                # If "on", enable LLVM assertions.
parallelism=4                                 # The value X to pass to make -j X to build in parallel.
buildtype=Release                             # LLVM/clang build type.
mode=install                                  # Install from scratch.
targets=host                                  # LLVM_TARGETS_TO_BUILD ("all" builds them all).

if eval ${cxx} --version | grep -q clang; then
    perform_stage0=0
    have_clang=1
else
    perform_stage0=1
    have_clang=0
fi

usage()
{
    printf "Usage: %s [<options>] <install-prefix>\n" $(basename $0)
    echo ""
    echo "Available options:"
    echo "    -A         enables assertions in LLVM libraries"
    echo "    -b         build type (Release, Debug, RelWithDebInfo) [default: ${buildtype}]"
    echo "    -c         skip cloning repositories, assume they are in place"
    echo "    -C         clean up after build by deleting the LLVM/clang source/build directories"
    echo "    -h|-?      display this help"
    echo "    -j <n>     build with <n> threads in parallel [default: ${parallelism}]"
    echo "    -m         use git/master instead of preconfigured versions"
    echo "    -s <stage> begin build from <stage> [0, 1, 2]"
    echo "    -u         update an existing build in <prefix> instead of installing new"
    echo ""
    echo "Environment variables:"
    echo "    CC         path to the C compiler for bootstrapping"
    echo "    CXX        path to the C++ compiler for bootstrapping"
}

cmdline=("$@")
while getopts "Ab::j:lms:ucCh?" opt ; do
    case "${opt}" in
        c)
            perform_clone=0
            ;;
        C)
            perform_cleanup=1
            ;;
        h|\?)
            usage
            exit 0
            ;;
        j)
            parallelism=${OPTARG}
            ;;
        m)
            use_master=1
            ;;
        s)
            if [ "${OPTARG}" == "0" ]; then
                perform_stage0=1
                perform_stage1=1
                perform_stage2=1
            elif [ "${OPTARG}" == "1" ]; then
                perform_stage0=0
                perform_stage1=1
                perform_stage2=1
            elif [ "${OPTARG}" == "2" ]; then
                perform_stage0=0
                perform_stage1=0
                perform_stage2=1
            else
                echo 'stage parameter must be in [0,1,2].'
                exit 1
            fi
            ;;
        u)
            mode=update
            ;;

        A)
            assertions=on
            ;;

        b)
            buildtype=${OPTARG}
            ;;

        esac
    done

    shift $(expr ${OPTIND} - 1)
    prefix=$(echo $1 | sed 's#/$##')
    shift

    if [ "${use_master}" != "1" ]; then
        # git version to checkout.
        default_release=release_40

        #    cherrypick="projects/libcxx 0c6d1a88 e515bbda f2e8c0454"  # Fix linking against in-tree libc++abi.
        #    cherrypick="${cherrypick};/ 168d0c143"  # Correctly add libc++abi to project list.
        #    cherrypick="${cherrypick};/ d9aaca0ec"  # Fix libc++abi build on FreeBSD.

    else
        default_release=master
    fi

    release="${release:-${default_release}}"

    version_llvm="${version_llvm:-${release}}"
    version_clang="${version_clang:-${release}}"
    version_libcxx="${version_libcxx:-${release}}"
    version_compilerrt="${version_compilerrt:-${release}}"
    version_libcxxabi="${version_libcxxabi:-${release}}"
    version_lldb="${version_lldb:-${release}}"
    version_lld="${version_lld:-${release}}"
    version_extra="${version_extra:-${release}}"

    if [ "${mode}" == "" -o "${prefix}" == "" ]; then
        echo "Error: Neither mode nor prefix have been specified."
        usage
        exit 1
    fi

    if [ ! -d ${prefix} ]; then
        if [ "${mode}" == "install" ]; then
            #if ! mkdir -p ${prefix}; then
            #  echo "failed to create directory ${prefix}"
            #  exit 1
            #fi
            echo "Install from scratch... Prefix is: $prefix"
        else
            echo "Updating... Prefix is: $prefix"
        fi
    fi

    #### Copy all output to log file. {{{1
    log=install.$$.log
    echo "Recording log in ${log} ..."
    exec > >(tee ${log}) # Requires fdescfs mounted to /dev/fd on FreeBSD.
    exec 2>&1

    #### Set paths and environment. {{{1

    unset CFLAGS
    unset CXXFLAGS
    unset CPPFLAGS
    unset LDFLAGS
    # unset LD_LIBRARY_PATH
    unset DYLD_LIBRARY_PATH

    # Built libraries with RTTI.
    export REQUIRES_RTTI=1
    export PATH=${prefix}/bin:${PATH}

    src="${TMPDIR:-${prefix}}/src/llvm"
    src_libcxxabi="${src}/projects/libcxxabi"
    src_libcxx="${src}/projects/libcxx"
    src_compilerrt="${src}/projects/compiler-rt"
    src_lldb="${src}/../lldb"
    src_lld="${src}/../lld"
    src_omp="${src}/../openmp"
    libcxx_include="${prefix}/include/c++/v1"
    libcxx_lib="${prefix}/lib"
    # default_includes="${libcxx_include}:/usr/include"

    #  mkdir -p "${libcxx_include}" || { \
        #    echo "cannot create libcxx_include"; \
        #    exit 1
    #}

    function _exec() # {{{2
    {
        printf "'%s' " "$@"
        printf "\n"
        "$@"
    }

    # _join_by                          {{{2
    # > join_by sep elem1 elem2...
    # http://stackoverflow.com/questions/1527049/join-elements-of-an-array/#17841619
    # This comment and code Copyleft, selectable license under the GPL2.0 or
    # later or CC-SA 3.0 (CreativeCommons Share Alike) or later. (c) 2008.
    # All rights reserved. No warranty of any kind. You have been warned.
    # http://www.gnu.org/licenses/gpl-2.0.txt
    # http://creativecommons.org/licenses/by-sa/3.0/
    function _join_by()
    {
        local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}";
    }
    # ----

    function st # {{{2
    {
        eval echo \$\{$1_stage${stage}\}
    }

    function actual # {{{2
    {
        echo $1_stage${stage}
    }

    function add_include_path # {{{2
    {
        include="$1"
        search_patch="$2"

        path="$(find "${search_patch}" | grep "${include}$" | awk '{print length, $0;}' | sort -n | head -1 | awk '{printf("%s", $2)}')"

        if [ "${path}" != "" ]; then
            path="$(echo -n ${path} | sed "s#${include}##g")"
            if [ "${default_includes}" = "" ]; then
                echo -n "${path}"
            else
                echo -n "${default_includes}:${path}"
            fi
        fi
    }

    function apply_patch # {{{2
    {
        patch="$1"
        base="$(basename "${patch}")"

        cwd="$(pwd)"

        _exec cd "${src}"

        if basename "${patch}" | grep -q -- '--'; then
            dir="$(echo "${base}" | awk -v src="${src}" -F '--' '{printf("%s/%s/%s", src, $1, $2);}')"
            if [ ! -d "${dir}" ]; then
                return
            fi

            _exec cd "${dir}"
        fi

        _exec git am -3 < "${patch}"
    }

    #### Clone reposistories. {{{1

    export GIT_COMMITTER_EMAIL="$(whoami)@localhost"
    export GIT_COMMITTER_NAME="$(whoami)"

    d="$(dirname $0)"
    patches="$(cd "${d}"; pwd)/patches"

    if [ "${perform_clone}" == "1" ]; then

        # Get/update the repositories.
        if [ "${mode}" == "install" ]; then

            test -d "${src}" && echo "${src} already exists, aborting" && exit 1
            mkdir -p "${src}" || { \
                echo "cannot create src dir"; \
                exit 1; \
            }

            echo "Changing directory to $(dirname ${src}) for installing  ..."
            cd "$(dirname "${src}")"

            git clone https://github.com/llvm-mirror/llvm.git $(basename ${src})

            ( cd "${src}/tools" && git clone https://github.com/llvm-mirror/clang.git )
            ( cd "${src}/projects" && git clone https://github.com/llvm-mirror/libcxx )
            ( cd "${src}/projects" && git clone https://github.com/llvm-mirror/compiler-rt )

            ( cd "${src}" && git checkout -q ${version_llvm} )
            ( cd "${src}/tools/clang" && git checkout -q ${version_clang}  )
            ( cd "${src_libcxx}" && git checkout -q ${version_libcxx} )
            ( cd "${src_compilerrt}" && git checkout -q ${version_compilerrt} )

            ( cd "${src}/projects" && git clone https://github.com/llvm-mirror/libcxxabi )
            ( cd "${src_libcxxabi}" && git checkout -q ${version_libcxxabi} )

            if [ "${perform_extra_build}" == "1" ]; then
                ( cd "${src}/tools/clang/tools" && git clone https://github.com/llvm-mirror/clang-tools-extra.git extra )
                ( cd "${src}/tools/clang/tools/extra" && git checkout -q ${version_extra} )
            fi

            if [ "${perform_lldb_build}" == "1" ]; then
                ( cd "$(dirname "${src_lldb}")" && git clone https://github.com/llvm-mirror/lldb "$(basename "${src_lldb}")")
                ( cd "${src_lldb}" && git checkout -q ${version_lldb}  )
            fi

            if [ "${perform_lld_build}" == "1" ]; then
                ( cd "$(dirname "${src_lld}")" && git clone https://github.com/llvm-mirror/lld "$(basename "${src_lld}")")
                ( cd "${src_lld}" && git checkout -q ${version_lld}  )
            fi

            if [ "${perform_omp_build}" == "1" ]; then
                ( cd "$(dirname "${src_omp}")" && git clone https://github.com/llvm-mirror/openmp "$(basename "${src_omp}")")
                ( cd "${src_omp}" && git checkout -q ${version_omp}  )
            fi

        else
            echo Changing directory to $(dirname ${src}) for updating ...
            cd $(dirname ${src})

            ( cd "${src}" && git pull --rebase )
            ( cd "${src}/tools/clang" && git pull --rebase )
            ( cd "${src_libcxx}" && git pull --rebase )
            ( cd "${src_compilerrt}" && git pull --rebase )

            ( cd "${src}" && git checkout -q ${version_llvm} )
            ( cd "${src}/tools/clang" && git checkout -q ${version_clang}  )
            ( cd "${src_libcxx}" && git checkout -q ${version_libcxx} )
            ( cd "${src_compilerrt}" && git checkout -q ${version_compilerrt} )

            ( cd "${src_libcxxabi}" && git pull --rebase )
            ( cd "${src_libcxxabi}" && git checkout -q ${version_libcxxabi} )

            if [ "${perform_extra_build}" == "1" ]; then
                # TODO: move somewhere it won't be build automatically
                ( cd "${src}/tools/clang/tools/extra" && git pull --rebase )
                ( cd "${src}/tools/clang/tools/extra" && git checkout -q ${version_extra} )
            fi

            if [ "${perform_lldb_build}" == "1" ]; then
                ( cd "${src_lldb}" && git pull --rebase )
                ( cd "${src_lldb}" && git checkout -q ${version_lldb}  )
            fi

            if [ "${perform_lld_build}" == "1" ]; then
                ( cd "${src_lld}" && git pull --rebase )
                ( cd "${src_lld}" && git checkout -q ${version_lld}  )
            fi

            if [ "${perform_omp_build}" == "1" ]; then
                ( cd "${src_omp}" && git pull --rebase )
                ( cd "${src_omp}" && git checkout -q ${version_omp}  )
            fi
        fi

        # Cherry pick additional commits from master.
        echo "${cherrypick}" | awk -v RS=\; '{print}' | while read line; do
        if [ "${line}" != "" ]; then
            repo=$(echo ${line} | cut -d ' ' -f 1)
            commits=$(echo ${line} | cut -d ' ' -f 2-)
            echo "Cherry-picking ${commits} in ${repo}"
            ( cd "${src}/${repo}" \
                && git cherry-pick --strategy=recursive -X theirs ${commits} )
        fi
    done

    # Apply any patches we might need.
    for i in "$(find "${patches}" -type f)"; do
        _exec apply_patch $i
    done

    echo === Done applying patches

fi

if [ "${OS}" == "Darwin" ]; then
    CMAKE_stage1="-DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++"

elif [ "${OS}" == "Linux" ] || [ "${OS}" == "FreeBSD" ]; then
    # CMAKE_stage1="-DLIBCXX_LIBCXXABI_WHOLE_ARCHIVE=on -DLIBCXXABI_ENABLE_SHARED=off -DBUILD_SHARED_LIBS=on"
    # CMAKE_stage1="-DLIBCXX_LIBCXXABI_WHOLE_ARCHIVE=on"
    CMAKE_stage2=${CMAKE_stage1}

    # default_includes=$(add_include_path features.h /usr/include)
    # default_includes=$(add_include_path sys/cdefs.h /usr/include)

else
    echo "OS ${OS} not supported"
    exit 1
fi

# I'm (Luc H.) unable to build with "BUILD_SHARED_LIBS=On" on my systems
# CMAKE_common="-DBUILD_SHARED_LIBS=on -DLLVM_TARGETS_TO_BUILD=${targets}"
# CMAKE_common="-DBUILD_SHARED_LIBS=on"
CMAKE_common=""
CMAKE_stage0="${CMAKE_common} ${CMAKE_stage0}"
CMAKE_stage1="${CMAKE_common} ${CMAKE_stage1} -DLLVM_ENABLE_ASSERTIONS=${assertions}"
CMAKE_stage2="${CMAKE_common} ${CMAKE_stage2} -DLLVM_ENABLE_ASSERTIONS=${assertions}"

#### Configure the stages. {{{1
prefix_stages="${src}/install"

# Stage 0 options. Get us a clang. {{{2

CC_stage0="${cc}"
CXX_stage0="${cxx}"
CXXFLAGS_stage0=""
CMAKE_stage0="${CMAKE_stage0}"
BUILD_TYPE_stage0=${buildtype}
INSTALL_PREFIX_stage0="${prefix_stages}-stage0"

other_settings_stage0=(               \
    "-DCLANG_ENABLE_BOOTSTRAP=On"     \
    )
test -n "$GCCHOME" && other_settings_stage0+=( \
    "-DGCC_INSTALL_PREFIX=${GCCHOME}" \
    )
# Stage 1 options. Compile against standard libraries. {{{2

if [ "${have_clang}" == "1" ]; then
    CC_stage1="${cc}"
    CXX_stage1="${cxx}"
else
    CC_stage1="${INSTALL_PREFIX_stage0}/bin/clang"
    CXX_stage1="${INSTALL_PREFIX_stage0}/bin/clang++"
fi

BUILD_TYPE_stage1=${buildtype}
INSTALL_PREFIX_stage1="${prefix_stages}-stage1"
other_settings_stage1=(                 \
    "-DCLANG_ENABLE_BOOTSTRAP=On"       \
    "-DCLANG_DEFAULT_CXX_STDLIB=libc++" \
    )
test -n "$GCCHOME" && other_settings_stage1+=( \
    "-DGCC_INSTALL_PREFIX=${GCCHOME}" \
    )

# Stage 2 options. Compile against our own libraries. {{{2

CC_stage2="${INSTALL_PREFIX_stage1}/bin/clang"
CXX_stage2="${INSTALL_PREFIX_stage1}/bin/clang++w"
# CFLAGS_stage2="-stdlib=libc++"
# CXXFLAGS_stage2="-stdlib=libc++"
# LDFLAGS_stage2="-nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc"
CMAKE_stage2="${CMAKE_stage2}"
BUILD_TYPE_stage2=${buildtype}
INSTALL_PREFIX_stage2="${prefix}"

other_settings_stage2=(                  \
    "-DCLANG_ENABLE_BOOTSTRAP=On"        \
    "-DCLANG_DEFAULT_CXX_STDLIB=libc++"  \
    )
test -n "$GCCHOME" && other_settings_stage2+=( \
    "-DGCC_INSTALL_PREFIX=${GCCHOME}" \
    )

# Compile the extra tools only now
# -> clang-tidy, clangd
# -> lldb: debugger
# -> lld: linker
# -> openmp: ...
# -> LLVM_TOOL_PARALLEL_LIBS_BUILD: Whether to build parallel-libs as part of LLVM
# -> LLVM_USE_INTEL_JITEVENTS: Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code
other_settings_stage2+=("-DLLVM_TOOL_PARALLEL_LIBS_BUILD=ON")
other_settings_stage2+=("-DLLVM_USE_INTEL_JITEVENTS=ON")

# Never generate these tools in the intermediary stages, even if we want
# them installed in the end.

project_list=()
test ${perform_lldb_build}  -eq 1 && project_list+=('lldb')
test ${perform_lld_build}   -eq 1 && project_list+=('lld')
projects="$(_join_by ';' "${project_list[@]}")"
test "${projects}"          != "" && other_settings_stage2+=("-DLLVM_ENABLE_PROJECTS=${projects}" )

#### Compile the stages. {{{1

# The compilation of each stage {{{2
printf "'%s' " "${cmdline[@]}"
echo ""

echo "Changing directory to ${src} ..."
cd "${src}"
LD_LIBRARY_PATH_save="${LD_LIBRARY_PATH}"

for stage in 0 1 2; do
    if [ "$(st perform)" == "0" ]; then
        continue
    fi

    if [ ${stage} -eq 2 ] ; then
        [ -f "${INSTALL_PREFIX_stage1}/bin/clang++w" ] && rm "${INSTALL_PREFIX_stage1}/bin/clang++w"
        cat > "${INSTALL_PREFIX_stage1}/bin/clang++w"  <<-EOF
        #!/bin/bash
        STAGED_PREFIX="${INSTALL_PREFIX_stage1}"
        export LD_LIBRARY_PATH="\${LD_LIBRARY_PATH}:\${STAGED_PREFIX}/lib"
        MYLFLAGS="-nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc"
        # Catch the case when we only want to compile; this helps us avoid some warnings:
        if echo "\$@" | egrep "(^-c | -c | -c$)" >/dev/null 2>&1; then
            MYLFLAGS=""
        fi
        # Use -stdlib=libc++ w/ clang built from source; otherwise use -I/usr/local/include/c++/v1
        "\${STAGED_PREFIX}/bin/clang++" -stdlib=libc++ "\$@" \${MYLFLAGS}
EOF

chmod +x "${INSTALL_PREFIX_stage1}/bin/clang++w"
# Register OpenMP project to the list to build.
# Unfortunatelly we can't use LLVM_ENABLE_PROJECTS as it only work with
# a limited set of projects => we need to make it visible in the right
# directory at the right moment.
if [ ${perform_omp_build} -eq 1 ] ; then
    _exec cd "${src}/projects"
    [ ! -d "openmp" ] && _exec ln -s "${src_omp}" .
fi
    fi

    echo ===
    echo === Building LLVM/clang, stage ${stage} ...
    echo ===

    other_settings_name="$(actual other_settings)"
    echo "other_settings_name: ${other_settings_name}"
    eval other_settings=( '"${'${other_settings_name}'[@]}"')

    if [ ${stage} -eq 1 ] ; then
        export LD_LIBRARY_PATH="${src}/build-stage1/lib:${LD_LIBRARY_PATH_save}"
    fi

    #-DENABLE_LIBOMPTARGET="off"

    ( _exec cd "${src}" &&                                           \
        _exec mkdir -p "build-stage${stage}" &&                      \
        _exec cd "build-stage${stage}" &&                            \
        CC="$(st CC)"                                                \
        CXX="$(st CXX)"                                              \
        CFLAGS="$(st CFLAGS)"                                        \
        CXXFLAGS="$(st CXXFLAGS)"                                    \
        LDFLAGS="$(st LDFLAGS)${addl_ldflags}"                       \
        _exec cmake                                                  \
        -DCMAKE_BUILD_TYPE="$(st BUILD_TYPE)"                        \
        -DLLVM_REQUIRES_RTTI=1                                       \
        -DLLVM_TARGETS_TO_BUILD="X86"                                \
        -DCMAKE_CXX_FLAGS="$(st CXXFLAGS)"                           \
        -DCMAKE_INSTALL_PREFIX="$(st INSTALL_PREFIX)"                \
        -DC_INCLUDE_DIRS="${default_includes}$(st default_includes)" \
        "${other_settings[@]}"                                       \
        ${addl_cmake}                                                \
        $(st CMAKE)                                                  \
        .. &&                                                        \
        _exec make -j ${parallelism} &&                              \
        _exec make -j ${parallelism} stage2                          \
        )


    if [ "$?" != "0" ] ; then
        echo ===
        echo === Failed building LLVM/clang at stage ${stage}
        echo ===
        exit 1
    fi

    _exec cd "${src}/build-stage${stage}"

    if [ ${stage} -eq 1 ] ; then
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH_save}"
        _exec make install
    else
        #TODO: sudo make install
        _exec make install
    fi

    st_prefix="$(st INSTALL_PREFIX)"
    # Des fois que ... pour la suite!
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH_save}:${st_prefix}/lib"

    echo "Default Config"
    echo | ${st_prefix}/bin/clang++ -Wp,-v -x c++ - -fsyntax-only
    echo "Config for stdlibc++"
    echo | ${st_prefix}/bin/clang++ -stdlib=libstdc++ -Wp,-v -x c++ - -fsyntax-only

done

if [ "${perform_cleanup}" == "1" ]; then
    echo "Deleting ${src} ..."
    rm -rf "${src}"
fi

echo "===="
echo "==== Complete log in ${log}"
echo "===="

# }}}1
# vim: set fdm=marker:
